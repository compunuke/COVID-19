<!DOCTYPE html>
<html>
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <script type="text/javascript" src="https://code.jquery.com/jquery-1.7.2.min.js"></script>
        <script src='https://cdn.plot.ly/plotly-latest.min.js'></script>
        <script>
            const abbrevs = { "AL": "Alabama", "AK": "Alaska", "AS": "American Samoa", "AZ": "Arizona", "AR": "Arkansas", "CA": "California", "CO": "Colorado", "CT": "Connecticut", "DE": "Delaware", "DC": "District of Columbia", "FM": "Federated States Of Micronesia", "FL": "Florida", "GA": "Georgia", "GU": "Guam", "HI": "Hawaii", "ID": "Idaho", "IL": "Illinois", "IN": "Indiana", "IA": "Iowa", "KS": "Kansas", "KY": "Kentucky", "LA": "Louisiana", "ME": "Maine", "MH": "Marshall Islands", "MD": "Maryland", "MA": "Massachusetts", "MI": "Michigan", "MN": "Minnesota", "MS": "Mississippi", "MO": "Missouri", "MT": "Montana", "NE": "Nebraska", "NV": "Nevada", "NH": "New Hampshire", "NJ": "New Jersey", "NM": "New Mexico", "NY": "New York", "NC": "North Carolina", "ND": "North Dakota", "MP": "Northern Mariana Islands", "OH": "Ohio", "OK": "Oklahoma", "OR": "Oregon", "PW": "Palau", "PA": "Pennsylvania", "PR": "Puerto Rico", "RI": "Rhode Island", "SC": "South Carolina", "SD": "South Dakota", "TN": "Tennessee", "TX": "Texas", "UT": "Utah", "VT": "Vermont", "VI": "Virgin Islands", "VA": "Virginia", "VI": "Virgin Islands", "WA": "Washington", "WV": "West Virginia", "WI": "Wisconsin", "WY": "Wyoming"};
            var data = [];
            var newRow = [];
            var states = {};
            var pops = {};
            var stats = [];
            var width = plotWidth = 0;
            var hist_days = 14;
            var measure = "cases";

            function getJSON(fileName) {
                var xobj = new XMLHttpRequest();
                xobj.overrideMimeType("application/json");
                xobj.open('GET', fileName, false);
                xobj.send(null);  
                json = JSON.parse(xobj.responseText);
                return json;
            }
            
            // get COVID Tracking Project Data
//            json = getJSON('daily.json'); //local file for testing
            json = getJSON('https://covidtracking.com/api/v1/states/daily.json');
            json.forEach(obj => {
                if (!['AS', 'GU', 'MH', 'MP', 'VI', 'PR'].includes(obj.state)) {
                    if (!Object.keys(states).includes(obj.state)) {
                        states[obj.state] = [];
                    }
                    newRow = [obj.date, obj.positiveIncrease, obj.totalTestResultsIncrease, obj.deathIncrease];
                    states[obj.state].push(newRow);
                }
            });

            //get Population data [web, static, local, from 2018 data]
            json = getJSON('States_Population_2018.json');
            json.data.forEach(obj => {
                stateID = obj.State;
                stateName = Object.keys(abbrevs).find(key => abbrevs[key] === obj.State); 
                pops[stateName] = obj.Population;
            });

            function process( states ) {
                stats = [];
                var sum_x = sum_x2 = sum_y = sum_xy = curState = 0;
                Object.keys(states).forEach(state => {
                    if (states[state].length >= hist_days) {
                        sum_x = sum_x2 = sum_y = sum_tri = sum_xy = 0;
                        for (i =0; i < hist_days; i++) {
                            //get values for least squares fit calculation
                            //normalize each positiveIncrease to a percent of the range between smallest and largest, i.e., the delta
                            //include other aggregates as desired
                            if (measure == 'cases') {
                                y = states[state][hist_days - i - 1][1]; //positive tests
                                tri = states[state][hist_days - i - 1][2]; //test results increae
                            } else {
                                y = states[state][hist_days - i - 1][3]; //deaths
                            }
                            sum_tri = sum_tri + tri; //just summing zeros for death count
                            sum_y = sum_y + y;
                            sum_x = sum_x + hist_days - i - 1;
                            sum_x2 = sum_x2 + i**2;
                            sum_xy = sum_xy + i * y;
                        }
                        slope = ( hist_days * sum_xy - sum_x * sum_y ) / ( hist_days * sum_x2 - sum_x**2 );
                        y_intercept = ( sum_y - slope * sum_x ) / hist_days;
                        delta = hist_days * slope;
                        popM = pops[state] / 1000000;
                        if (measure == "cases") {
                            slope_pct = delta / sum_tri * 100;
                        } else {
                            slope_pct = delta / pops[state] * 100000;
                        }
                        stats.push({"state": state, "slope": slope, "slope_pct": slope_pct, "y_intercept": y_intercept, "delta": delta, 
                                    "sum_y": sum_y, "sum_tri": sum_tri, "popM": popM});
//                        console.log( state + "\t" + slope.toFixed(2) + "\t" + y_intercept.toFixed(2) + "\t" + delta.toFixed(2) + "\t" + sum_y.toFixed(0) + "\t" + slope_pct.toFixed(2) );
                    }
                });
                graph();
            };

            function graph() {
                var xVals = [];
                var yVals = [];
                var labels = [];
                var data = [];
                var trace1 = {};
                var trace2 = {};
                var layout = {};
                
                width = window.innerWidth;
                plotWidth = (width - 150) / 5; // 150 pixels for left/right arrows on each end and space between plots
                if (plotWidth < 150) {plotWidth = 150}; // set min plot width

                //sort states by slope_pct, lowest to highest slope
                stats.sort(function(a, b){return a.slope_pct - b.slope_pct});

                for (i = 0; i < stats.length; i++) {
                    xVals.push(stats[i].state);
                    if (measure == "cases") {
                        yVals.push(stats[i].slope_pct); 
                        labels.push("tests/day: " + parseInt(stats[i].sum_tri/hist_days).toLocaleString() + "<br>linear chg/day: " + stats[i].slope.toFixed(2));
                    } else {
                        yVals.push(stats[i].slope_pct); 
                        labels.push("Deaths this period: " + parseInt(stats[i].sum_y).toLocaleString() + "<br>State pop millions: " + stats[i].popM.toFixed(2));
                    }
                };

                trace1 = {
                    x: xVals,
                    y: yVals,
                    text: labels,
                    mode: 'lines'
                };

                if (measure == "cases") {
                    title = "United States' \"Least Squares Fit\" Trends,<br>Best Decline to Worst Growth of New Daily Positive Cases";
                    ytitle = "%pos / all tests";
                } else {
                    title = "United States' \"Least Squares Fit\" Trends,<br>Best Decline to Worst Growth of New Daily Death Rates";
                    ytitle = "deaths +/- trend %";
                };
                var myPlot = document.getElementById('rankOrder'),
                    data = [ trace1 ],
                    layout = {
                        title: title,
                        margin: {t:50, b:50, l:50},
                        height: 200,
                        width: window.innerWidth,
                        yaxis: {
                            title: ytitle
                        }
                    };

                Plotly.newPlot('rankOrder', data, layout, {displayModeBar: false});
                myPlot.on('plotly_click', function(){
                    state = arguments[0].points[0].x; //state value from upper chart that was clicked
                    i=0;
                    while (stats[i].state != state) {i++}; //find the state choice
                    if (i > stats.length - 3) {i = stats.length - 3}; //don't have two states to the right of choice
                    if (i < 2) {i = 2}; //put chosen state in the middle unless state was left most
                    curState = i;
                    dotPlot5(i);
                });

                dotPlot5(2);
                curState = 2;

                //delay showing until the graphs appear
                document.getElementById("all").style.display = "block";
            }

            function dotPlot5(i) {
                dotPlot(stats[i - 2].state, stats[i - 2].slope, "plot1");
                dotPlot(stats[i - 1].state, stats[i - 1].slope, "plot2");
                dotPlot(stats[i].state,     stats[i].slope,     "plot3");
                dotPlot(stats[i + 1].state, stats[i + 1].slope, "plot4");
                dotPlot(stats[i + 2].state, stats[i + 2].slope, "plot5");
            }


            function dotPlot(state, slope, plot) {
                xVals = [];
                yVals = [];
                yVals2 = [];
                labels = [];
                slope = "linear chg/day: " + slope.toFixed(2)
                stateName = abbrevs[state];
                var i = 0;
                if ( states[state].length < hist_days ) {
                    hist_days = states[state].length;
                }
                for (i = 0; i < hist_days; i++) {
                    xVals.push(states[state][hist_days - i - 1][0].toString().substr(-4)); //date
                    if (measure == "cases") {
                        yVals.push(states[state][hist_days - i - 1][1]); //pos cases
                        yVals2.push(states[state][hist_days - i - 1][1] / states[state][hist_days - i - 1][2] * 100); //positivity rate %
                    } else {
                        yVals.push(states[state][hist_days - i - 1][3]); //deaths
                    }
                };

                trace1 = {
                    x: xVals,
                    y: yVals,
                    mode: 'markers'
                };

                trace2 = {
                    x: xVals,
                    y: yVals2,
                    name: 'pos %',
                    yaxis: 'y2',
                    mode: 'markers',
                    marker: {symbol: 'triangle-up', color: 'rgb(255, 100, 100)'}
                };

                //get stats for the state being processed for this graph
                var which = $.grep(stats, function(obj){return obj.state === state;});
                trace3 = {
                    x: [xVals[0], xVals[xVals.length - 1]],
                    y: [which[0].y_intercept.toFixed(0), (which[0].y_intercept + hist_days * which[0].slope).toFixed(0)],
                    name: 'trend',
                    text: [slope, slope],
                    mode: 'lines',
                    line: {color: 'rgb(255,0,0)'}
                }

                layout = {
                    xaxis: {type: "category" },
                    title: "<b>" + stateName + "</b>",
                    showlegend: true,
                    legend: {x: 0, y: -0.6, yanchor: 'bottom', orientation: 'h'},
                    margin: {t:50, b:50, l:50, r:50},
//                    autosize: false,
                    height: 250, 
                    width: plotWidth
                };
                if (measure == "cases") {
//                    title = "United States' \"Least Squares Fit\" Trends,<br>Best Decline to Worst Growth of New Daily Positive Cases";
                    layout.yaxis = {title: "pos tests / day"};
                    layout.yaxis2 = {overlaying: 'y', side: 'right'};
                    trace1.name = 'pos';
                    data = [ trace1, trace2, trace3 ];
                } else {
//                    title = "United States' \"Least Squares Fit\" Trends,<br>Best Decline to Worst Growth of New Daily Death Rates";
                    layout.yaxis = {title: "deaths / day"};
                    trace1.name = 'deaths';
                    data = [ trace1, trace3 ];
                };

                Plotly.newPlot(plot, data, layout, {displayModeBar: false});
            }

            function setDays() {
                if (document.getElementById("hist_days").innerText == "last 30 days") {
                    document.getElementById("hist_days").innerText = "last 14 days";
                    hist_days = 30;
                    process( states );
                } else {
                    document.getElementById("hist_days").innerText = "last 30 days";
                    hist_days = 14;
                    process( states );
                };
            }

            function setMeasure() {
                if (document.getElementById("measure").innerText == "death rate") {
                    document.getElementById("measure").innerText = "case counts";
                    document.getElementById("chartsTitle").innerHTML = "<b>Daily COVID-19 Deaths Reported</b>";
                    document.getElementById("notes1").style.display = "none";
                    document.getElementById("notes2").style.display = "block";
                    measure = "deaths";
                    process( states );
                } else {
                    document.getElementById("measure").innerText = "death rate";
                    document.getElementById("chartsTitle").innerHTML = "<b>New Positive Tests / Day</b><br>[Positivity Rate %, right axis]";
                    document.getElementById("notes1").style.display = "block";
                    document.getElementById("notes2").style.display = "none";
                    measure = "cases";
                    process( states );
                };
            }

            function slider(dir) {
                if (dir == "left") {
                    curState = curState - 5;
                    if (curState < 2) {curState = 2}
                } else {
                    curState = curState + 5;
                    if (curState > stats.length -3) {curState = stats.length -3}
                }
                i = curState;
                    dotPlot5(i);
            }

            function adjustGraphs() {
                graph();
                if (curState >= 2) {
                    dotPlot5(curState);
                } else {
                    dotPlot5(2);
                }
            }
        </script>
    </head>
    <body onload="process(states)" onresize="adjustGraphs()">
        <div id="all" style="display: none">
            Change to <button id = "measure" onClick="setMeasure()">death rate</button> 
            Change to <button id = "hist_days" onClick="setDays()">last 30 days</button> 
            <div id = "rankOrder"></div><br>
            <div id = "notes1" style="display: block">
                <font color="red"><b>Click along the line above to center the graphs below on the selected State and nearest statistical neighbors.</b></font><p>
                States are ordered by the normalized slope of the trend line for their daily new positive cases. 
                The y-axis shows the trend linear change in positive cases over the period, divided by each State's cumulative number of all [pos + neg] tests over the period.<br>
                The actual linear slope [daily rise/fall] appears as a tool tip.  No conclusions can be drawn about untested individuals, so State population is not relevant.<br>
                Note that the number of positive tests per day is strongly influenced by the number of all tests reported per day.  In other words, ramping up testing is likely to ramp up positive cases.
            </div>
            <div id = "notes2" style="display: none">
                <font color="red"><b>Click along the line above to center the graphs below on the selected State and nearest statistical neighbors.</b></font><p>
                States are ordered by the sum of deaths over the period divided by the State population [2018 census data]. <br>
                The y-axis shows the trend line percent decrease or increase in death rate per thousand in the State over the period.<br>
                The actual death count over the period chosen and State population appears as a tool tip. <br>
            </div>
            <table id="slider">
                <tr><td colspan="7" style="text-align: center"><span id="chartsTitle"><b>New Positive Tests / Day</b><br>[Positivity Rate %, right axis]</span></td></tr>
                <tr>
                    <td><img src="LeftArrow.png" width="20" onClick="slider('left')"><br>Left 5</td>
                    <td><div id='plot1'></div>
                    <td><div id='plot2'></div>
                    <td><div id='plot3'></div>
                    <td><div id='plot4'></div>
                    <td><div id='plot5'></div>
                    <td><img src="RightArrow.png" width="20" onClick="slider('right')"><br>Right 5</td>
                </tr>
            </table>
            <p>Data shown are from: <a href="https://covidtracking.com" target="_blank">https://covidtracking.com</a></p>
        </div>
    </body>
</html>