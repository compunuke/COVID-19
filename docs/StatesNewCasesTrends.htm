<!DOCTYPE html>
<html>
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <script type="text/javascript" src="https://code.jquery.com/jquery-1.7.2.min.js"></script>
        <script src='https://cdn.plot.ly/plotly-latest.min.js'></script>
        <script>
            var data = [];
            var newRow = [];
            var states = {};
            var stats = [];
            var abbrevs = { "AL": "Alabama", "AK": "Alaska", "AS": "American Samoa", "AZ": "Arizona", "AR": "Arkansas", "CA": "California", "CO": "Colorado", "CT": "Connecticut", "DE": "Delaware", "DC": "District Of Columbia", "FM": "Federated States Of Micronesia", "FL": "Florida", "GA": "Georgia", "GU": "Guam", "HI": "Hawaii", "ID": "Idaho", "IL": "Illinois", "IN": "Indiana", "IA": "Iowa", "KS": "Kansas", "KY": "Kentucky", "LA": "Louisiana", "ME": "Maine", "MH": "Marshall Islands", "MD": "Maryland", "MA": "Massachusetts", "MI": "Michigan", "MN": "Minnesota", "MS": "Mississippi", "MO": "Missouri", "MT": "Montana", "NE": "Nebraska", "NV": "Nevada", "NH": "New Hampshire", "NJ": "New Jersey", "NM": "New Mexico", "NY": "New York", "NC": "North Carolina", "ND": "North Dakota", "MP": "Northern Mariana Islands", "OH": "Ohio", "OK": "Oklahoma", "OR": "Oregon", "PW": "Palau", "PA": "Pennsylvania", "PR": "Puerto Rico", "RI": "Rhode Island", "SC": "South Carolina", "SD": "South Dakota", "TN": "Tennessee", "TX": "Texas", "UT": "Utah", "VT": "Vermont", "VI": "Virgin Islands", "VA": "Virginia", "VI": "Virgin Islands", "WA": "Washington", "WV": "West Virginia", "WI": "Wisconsin", "WY": "Wyoming"};
            var sum_x = sum_x2 = sum_y = sum_xy = curState = 0;
            var width = plotWidth = 0;
            var hist_days = 14;

//            data = $.getJSON("./daily.json", function (inFile) {
            data = $.getJSON("https://covidtracking.com/api/v1/states/daily.json").then (function (inFile) {
                data = inFile;
                data.forEach(obj => {
                    if (!['AS', 'GU', 'MH', 'MP', 'VI', 'PR'].includes(obj.state)) {
                        if (!Object.keys(states).includes(obj.state)) {
                            states[obj.state] = [];
                        }
                        newRow = [obj.date, obj.positiveIncrease, obj.totalTestResultsIncrease];
                        states[obj.state].push(newRow);
                    }
                });
                process( states );
            });


            function process( states ) {
                stats = [];
                Object.keys(states).forEach(state => {
                    if (states[state].length >= hist_days) {
                        sum_x = sum_x2 = sum_y = sum_tri = sum_xy = 0;
                        for (i =0; i < hist_days; i++) {
                            //get values for least squares calculation
                            //normalize each positiveIncrease to a percent of the range between smallest and largest
                            y = states[state][hist_days - i - 1][1];
                            tri = states[state][hist_days - i - 1][2];
                            sum_tri = sum_tri + tri;
                            sum_y = sum_y + y;
                            sum_x = sum_x + hist_days - i - 1;
                            sum_x2 = sum_x2 + i**2;
                            sum_xy = sum_xy + i * y;
//                            console.log (state, i, y, i**2, i * y);
                        }
                        slope = ( hist_days * sum_xy - sum_x * sum_y ) / ( hist_days * sum_x2 - sum_x**2 );
                        y_intercept = ( sum_y - slope * sum_x ) / hist_days;
                        delta = hist_days * slope;
                        slope_pct = delta / sum_tri * 100;
                        stats.push({"state": state, "slope": slope, "slope_pct": slope_pct, "y_intercept": y_intercept, "delta": delta, "sum_y": sum_y});
//                        console.log( state + "\t" + slope.toFixed(2) + "\t" + y_intercept.toFixed(2) + "\t" + delta.toFixed(2) + "\t" + sum_y.toFixed(0) + "\t" + slope_pct.toFixed(2) );
                    }
                });
                graph();
            };

            function graph() {
                var xVals = [];
                var yVals = [];
                var labels = [];
                var data = [];
                var trace1 = {};
                var trace2 = {};
                var layout = {};
                
                width = window.innerWidth;
                plotWidth = (width - 150) / 5; // 150 pixels for left/right arrows on each end and space between plots
                if (plotWidth < 150) {plotWidth = 150}; // set min plot width

                //sort states by slope_pct, lowest to highest slope
                stats.sort(function(a, b){return a.slope_pct - b.slope_pct});

                for (i = 0; i < stats.length; i++) {
                    xVals.push(stats[i].state);
                    yVals.push(stats[i].slope_pct);
                    labels.push("slope: " + stats[i].slope.toFixed(2));
                };

                trace1 = {
                    x: xVals,
                    y: yVals,
                    text: labels,
                    mode: 'lines'
                };
                var myPlot = document.getElementById('rankOrder'),
                    data = [ trace1 ],
                    layout = {
                        title:"United States' \"Least Squares Fit\" Trends,<br>Best Decline to Worst Growth of New Daily Positive Cases",
                        margin: {t:50, b:50, l:50},
                        height: 200,
                        width: window.innerWidth
                    };

                Plotly.newPlot('rankOrder', data, layout);
                myPlot.on('plotly_click', function(){
                    state = arguments[0].points[0].x; //state value from upper chart that was clicked
                    i=0;
                    while (stats[i].state != state) {i++}; //find the state choice
                    if (i > stats.length - 3) {i = stats.length - 3}; //don't have two states to the right of choice
                    if (i < 2) {i = 2}; //put chosen state in the middle unless state was left most
                    dotPlot(stats[i - 2].state, stats[i - 2].slope, "plot1");
                    dotPlot(stats[i - 1].state, stats[i - 1].slope, "plot2");
                    dotPlot(stats[i].state,     stats[i].slope,     "plot3");
                    dotPlot(stats[i + 1].state, stats[i + 1].slope, "plot4");
                    dotPlot(stats[i + 2].state, stats[i + 2].slope, "plot5");
                    curState = i;
                });

                dotPlot(stats[0].state, stats[0].slope, "plot1");
                dotPlot(stats[1].state, stats[1].slope, "plot2");
                dotPlot(stats[2].state, stats[2].slope, "plot3");
                dotPlot(stats[3].state, stats[3].slope, "plot4");
                dotPlot(stats[4].state, stats[4].slope, "plot5");
                curState = 2;

                //delay showing until the graphs appear
                document.getElementById("all").style.display = "block";
            }


            function dotPlot(state, slope, plot) {
                xVals = [];
                yVals = [];
                slope = "slope: " + slope.toFixed(2)
                var i = 0;
                if ( states[state].length < hist_days ) {
                    hist_days = states[state].length;
                }
//                for (i = hist_days - 1; i >= 0; i--) {
                for (i = 0; i < hist_days; i++) {
                    xVals.push(states[state][hist_days - i - 1][0].toString().substr(-4)); //date
                    yVals.push(states[state][hist_days - i - 1][1]); //pos cases
//                    console.log(i,states[state][hist_days - i - 1][1]);
                };
//                console.log(xVals, yVals);

                trace1 = {
                    x: xVals,
                    y: yVals,
                    mode: 'markers'
                };

                var which = $.grep(stats, function(obj){return obj.state === state;});
                trace2 = {
                    x: [xVals[0], xVals[xVals.length - 1]],
                    y: [which[0].y_intercept.toFixed(0), (which[0].y_intercept + hist_days * which[0].slope).toFixed(0)],
                    text: [slope, slope],
                    mode: 'lines'
                }

                data = [ trace1, trace2 ];

                layout = {
                    xaxis: {type: "category" },
                    title: `${state}`,
                    showlegend: false,
                    margin: {t:50, b:50, l:50, r:0},
//                    autosize: false,
                    height: 200, 
                    width: plotWidth
                };

                Plotly.newPlot(plot, data, layout);
            }
            function setDays() {
                if (document.getElementById("hist_days").innerText == "last 30 days") {
                    document.getElementById("hist_days").innerText = "last 14 days";
                    hist_days = 30;
                    process( states );
                } else {
                    document.getElementById("hist_days").innerText = "last 30 days";
                    hist_days = 14;
                    process( states );
                };
            }
            function slider(dir) {
                if (dir == "left") {
                    curState = curState - 5;
                    if (curState < 2) {curState = 2}
                } else {
                    curState = curState + 5;
                    if (curState > stats.length -3) {curState = stats.length -3}
                }
                i = curState;
                    dotPlot(stats[i - 2].state, stats[i - 2].slope, "plot1");
                    dotPlot(stats[i - 1].state, stats[i - 1].slope, "plot2");
                    dotPlot(stats[i].state,     stats[i].slope,     "plot3");
                    dotPlot(stats[i + 1].state, stats[i + 1].slope, "plot4");
                    dotPlot(stats[i + 2].state, stats[i + 2].slope, "plot5");
            }
            function adjustGraphs() {
                graph();
                dotPlot(stats[curState - 2].state, stats[curState - 2].slope, "plot1");
                dotPlot(stats[curState - 1].state, stats[curState - 1].slope, "plot2");
                dotPlot(stats[curState].state, stats[curState].slope,         "plot3");
                dotPlot(stats[curState + 1].state, stats[curState + 1].slope, "plot4");
                dotPlot(stats[curState + 2].state, stats[curState + 2].slope, "plot5");
            }
        </script>
    </head>
    <body onresize="adjustGraphs()">
        <div id="all" style="display: none">
            Show <button id = "hist_days" onClick="setDays()">last 30 days</button> 
            <div id="rankOrder"></div><br>
            <div id = "notes1">
                <font color="red"><b>Click along the line above to center the graphs below on the selected State and nearest statistical neighbors.</b></font><p>
                States are ordered by the normalized slope of the trend line for their daily new positive cases. 
                The y-axis shows the trend linear change in positive cases over the period divided by each State's cumulative number of all [pos + neg] tests over the period.<br>
                The actual linear slope [daily rise/fall] appears as a tool tip.  No conclusions can be drawn about untested individuals, so State population is not relevant.<br>
                Note that the number of positive tests / day is strongly influenced by the number of all tests reported / day.
            </div>
            <table id="slider">
                <tr><td colspan="7" style="text-align: center"><b>New Positive Tests / Day</b></td></tr>
                <tr>
                    <td><img src="LeftArrow.png" width="20" onClick="slider('left')"><br>Left 5</td>
                    <td><div id='plot1'></div>
                    <td><div id='plot2'></div>
                    <td><div id='plot3'></div>
                    <td><div id='plot4'></div>
                    <td><div id='plot5'></div>
                    <td><img src="RightArrow.png" width="20" onClick="slider('right')"><br>Right 5</td>
                </tr>
            </table>
            <p>Data shown are from: <a href="https://covidtracking.com">https://covidtracking.com</a></p>
        </div>
    </body>
</html>